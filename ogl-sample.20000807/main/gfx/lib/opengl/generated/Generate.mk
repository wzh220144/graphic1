#! gmake
#
# License Applicability. Except to the extent portions of this file are
# made subject to an alternative license as permitted in the SGI Free
# Software License B, Version 1.1 (the "License"), the contents of this
# file are subject only to the provisions of the License. You may not use
# this file except in compliance with the License. You may obtain a copy
# of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
# Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
# 
# http://oss.sgi.com/projects/FreeB
# 
# Note that, as provided in the License, the Software is distributed on an
# "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
# DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
# CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
# PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
# 
# Original Code. The Original Code is: OpenGL Sample Implementation,
# Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
# Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
# Copyright in any portions created by third parties is as indicated
# elsewhere herein. All Rights Reserved.
# 
# Additional Notice Provisions: The application programming interfaces
# established by SGI in conjunction with the Original Code are The
# OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
# April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
# 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
# Window System(R) (Version 1.3), released October 19, 1998. This software
# was created using the OpenGL(R) version 1.2.1 Sample Implementation
# published by SGI, but has not been independently verified as being
# compliant with the OpenGL(R) version 1.2.1 Specification.
#

# Make rules to generate the generated source files

# $Date$ $Revision$
# $Header: //depot/main/gfx/lib/opengl/generated/Generate.mk#12 $

include $(ROOT)/usr/include/libspec/libspecdefs

RM = rm
GENDIR = $(GFXDIR)/generated

LISTUTIL = $(GENDIR)/listutil.ls

DISPATCH_H_GEN = $(GENDIR)/dispatch.ls
IMFUNCS_H_GEN = $(GENDIR)/imfuncs.ls
LCFUNCS_H_GEN = $(GENDIR)/lcfuncs.ls
LCEFUNCS_H_GEN = $(GENDIR)/lcefuncs.ls
LISTCOMP_H_GEN = $(GENDIR)/listcomp.ls
LISTOP_H_GEN = $(GENDIR)/listop.ls
TABLEDEF_H_GEN = $(GENDIR)/tablehdr.ls

COPYRIGHT = $(GENDIR)/copyright.h
AUTO_TXT = "/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */"

# Use our special local typemaps
API_C_GEN = $(GENDIR)/api.ls
DLIST_C_GEN = $(GENDIR)/dlist.ls
LTAB_C_GEN = $(GENDIR)/ltab.ls
TEMPLATE_C_GEN = $(GENDIR)/template.ls

DLIST_ASM_GEN = $(GENDIR)/dlistasm.ls

IMMED_H = g_imfncs.h
LCOMP_H = g_lcomp.h

######################################################################

# extension function prototypes with formals
g_xproto.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(TEMPLATE_C_GEN) $(CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(TEMPLATE_C_GEN) $(CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) > $@
	echo "#ifndef __g_xproto_h_" >> $@
	echo "#define __g_xproto_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP="$(C_TYPEMAP)" -DOUTPUT="$@" \
		-DFORMALS="yes" -DEXTPROTO="yes" -DPROCPREFIX="gl" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" | sort +2 >> $@
	echo >> $@
	echo "#endif /* __g_xproto_h_ */" >> $@
	$(RM) $@.tmp.ls

######################################################################

# Definitions of display list opcodes.
g_listop.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(LISTOP_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(LISTOP_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	cat $(COPYRIGHT) >> $@
	echo $(AUTO_TXT) >> $@
	$(LIBSPEC) $(CHECKFLAG) -DOUTPUT="opcodes" \
		-DTYPEMAP=$(C_TYPEMAP) -T $(TYPEMAPSDIR) \
		-P $(LIBSPEC_PARSER) $@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	$(RM) -f $@.tmp.ls

# Definition of the dispatch tables.
g_disp.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo "#ifndef __g_disp_h_" >> $@
	echo "#define __g_disp_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_disp_h -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	echo "#endif /* __g_disp_h_ */" >> $@
	$(RM) -f $@.tmp.ls

# immediate mode and LC dispatch tables
g_disp.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(TYEMAP) $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_disp_c -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

# Nop dispatch table
g_noptab.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DISPATCH_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_noptab_c -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Prototypes for immediate mode functions.
g_imfncs.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(IMFUNCS_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(IMFUNCS_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo "#ifndef __g_imfncs_h_" >> $@
	echo "#define __g_imfncs_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_imfncs_h -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	echo "#endif /* __g_imfncs_h_ */" >> $@
	$(RM) -f $@.tmp.ls

# Prototypes for list compilation functions.
g_lcfncs.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(LCFUNCS_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(LCFUNCS_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo "#ifndef __g_lcfncs_h_" >> $@
	echo "#define __g_lcfncs_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_lcfncs_h -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	echo "#endif /* __g_lcfncs_h_ */" >> $@
	$(RM) -f $@.tmp.ls

# Prototypes for list compile&execution functions.
g_lcefncs.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(LCEFUNCS_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(LCEFUNCS_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo "#ifndef __g_lcefncs_h_" >> $@
	echo "#define __g_lcefncs_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_lcefncs_h -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	echo "#endif /* __g_lcefncs_h_ */" >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Automatically generated portion of the API front end
g_api.s: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(API_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(API_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) -D GEN_API_ASM=1 \
		$@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	$(RM) -f $@.tmp.ls

g_asmapi.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(API_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(API_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) -D GEN_API_ASM=1 \
		$@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	$(RM) -f $@.tmp.ls

g_api.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(API_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(API_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) -D GEN_API_ASM=0 \
		$@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Automatically generated portion of the display list processing code
g_lexec.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DLIST_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_lexec_c \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

g_lcomp.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DLIST_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_lcomp_c \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

g_splcmp.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DLIST_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_splcmp_c \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

G_COMPEX_OUTPUT = g_lcompex_funcs,g_lcompex_table,g_api_table

g_lcmpex.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DLIST_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=$(G_COMPEX_OUTPUT) -T $(TYPEMAPSDIR) \
		-P $(LIBSPEC_PARSER) $@.tmp.ls "$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

g_lcmpexasm.s: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(TYPEMAPS) $(DLIST_ASM_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_ASM_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_lcmpexasm_s \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

g_splcfs.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(DLIST_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(DLIST_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_splcfs_h \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Table of list execution routines.
g_ltab.c: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(LTAB_C_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(LTAB_C_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo >> $@
	echo $(AUTO_TXT) >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) -DOUTPUT=g_lexec_c \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Automatically generated header file defining the structures used by
# g_lcomp and g_lexec functions to package their arguments for display
# listing. This header file also contains display list compilation and

g_lcomp.h: $(SPECDIR)/$(GL_SPEC) $(TYPEMAPSDIR)/$(C_TYPEMAP) $(LISTCOMP_H_GEN) $(LIBSPEC_CUTILS)
	$(RM) -f $@.tmp.ls $@
	cat $(LISTCOMP_H_GEN) $(LIBSPEC_CUTILS) > $@.tmp.ls
	echo $(AUTO_TXT) >> $@
	echo "#ifndef __g_lcomp_h_" >> $@
	echo "#define __g_lcomp_h_" >> $@
	echo >> $@
	cat $(COPYRIGHT) >> $@
	echo >> $@
	$(LIBSPEC) $(CHECKFLAG) -DTYPEMAP=$(C_TYPEMAP) \
		-DOUTPUT=g_lcomp_h -DOPTIONS="" -DPREFIX="" \
		-T $(TYPEMAPSDIR) -P $(LIBSPEC_PARSER) $@.tmp.ls \
		"$(SPECDIR)/$(GL_SPEC)" >> $@
	echo >> $@
	echo "#endif /* __g_lcomp_h_ */" >> $@
	$(RM) -f $@.tmp.ls

######################################################################

# Create g_os.h by copying the unix specific os.h file, for now

g_os.h: $(GFXDIR)/include/osunix.h
	$(RM) -f $@
	cp $(GFXDIR)/include/osunix.h $@

######################################################################

# Create g_imports.h by copying the X specific imports.h file, for now

g_imports.h: $(GFXDIR)/include/importsx.h
	$(RM) -f $@
	cp $(GFXDIR)/include/importsx.h $@

######################################################################
