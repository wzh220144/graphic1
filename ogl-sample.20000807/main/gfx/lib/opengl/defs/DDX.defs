# License Applicability. Except to the extent portions of this file are
# made subject to an alternative license as permitted in the SGI Free
# Software License B, Version 1.1 (the "License"), the contents of this
# file are subject only to the provisions of the License. You may not use
# this file except in compliance with the License. You may obtain a copy
# of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
# Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
#
# http://oss.sgi.com/projects/FreeB
#
# Note that, as provided in the License, the Software is distributed on an
# "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
# DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
# CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
# PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
#
# Original Code. The Original Code is: OpenGL Sample Implementation,
# Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
# Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
# Copyright in any portions created by third parties is as indicated
# elsewhere herein. All Rights Reserved.
#
# Additional Notice Provisions: The application programming interfaces
# established by SGI in conjunction with the Original Code are The
# OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
# April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
# 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
# Window System(R) (Version 1.3), released October 19, 1998. This software
# was created using the OpenGL(R) version 1.2.1 Sample Implementation
# published by SGI, but has not been independently verified as being
# compliant with the OpenGL(R) version 1.2.1 Specification.
#
# $Date$ $Revision$
# $Header: //depot/main/gfx/lib/opengl/defs/DDX.defs#21 $

#
# Override includes locations for DDX
#

ifeq ($(R5BUILD),YES)
LCINCS = \
	-I. \
	-I../../drivers/DDX \
	-I../../include \
	-I$(ROOT)/usr/include \
	-I$(GLXDIR)/include \
	-I$(GLXDIR)/server \
	-I$(XTOPDIR)/mit/include \
	-I$(XTOPDIR)/mit/extensions/include \
	-I$(XTOPDIR)/mit/server/include \
	$(NULL)

BLD_DEFINES = -DX11R5
else
LCINCS = \
	-I. \
	-I../../drivers/DDX \
	-I../../include \
	-I$(ROOT)/usr/include \
	-I$(GLXDIR)/include \
	-I$(GLXDIR)/server \
	-I$(XTOPDIR)/xc/include -I$(XTOPDIR)/xc/programs/Xserver/include \
	-I$(XTOPDIR)/xc/include/extensions \
	$(NULL)
endif

ifeq ($(OS),Linux)
LCINCS += -I$(XTOPDIR)/xc/programs/Xserver/hw/xfree86/

BLD_DEFINES = -DXF86
endif

# hack, so that we can get the system include files, without having to
# install them in $(ROOT)
LCINCS += -I/usr/include

VPATH = ../../glcore ../../drivers/DDX

LCDEFS += $(BLD_DEFINES)

#
# define for a little endian machine (Intel).
# leave undefined for a big endian machine (mips).
#
ifeq ($(OS),Linux)
# XXX: not strictly true, we are assuming Linux is only Intel
LCDEFS += -D__GL_LITTLE_ENDIAN
endif

#
# define if hardware buffers have to be aligned to a specific boundary
#
#LCDEFS += -D__GL_ALIGNED_BUFFERS

#
# define so you can read environment variables
#
LCDEFS += -D__GL_ENVVARS

#
# define if you want color arrays per scanlines to be allocated on the heap.
# The following tradeoff exists:
#   heap:  . Allocated/freed once
#	   . may thrash the cache
#	   . memory hog
#   stack: . Allocated/freed on the stack on every soft tri routine
#	   . may still thrash the cache
#	   . may overrun stack size on some compilers
#
#LCDEFS += -D__GL_ALLOCATE_SCANLINE_ARRAYS

#
# define for support for external agents (like GLS)
#
#LCDEFS += -D__GL_SUPPORT_EXTERNAL_AGENTS

#
# define for window environments that want to keep their own dispatch table
# (like MS Windows)
#
#LCDEFS += -D__GL_WINDOW_SYSTEM_DISPATCH

#
# define for half pixel offset in XY
#
#LCDEFS += -D__GL_HALF_PIXEL_OFFSET

#
# define for projection of texcoords before rasterization setup
#
#LCDEFS += -D__GL_PROJSCALED_TEXCOORDS

#
# define for scaling texcoords from s/t to u/v before raster setup
#LCDEFS += -D__GL_UVSCALED_TEXCOORDS

#
# define to enable fragment rasterizer
#
#LCDEFS += -D__GL_FR_RAST

#
# define if hardware needs syncing between accing the registers and accessing
# the frame buffer directly
#
#LCDEFS += -D__GL_HW_NEEDS_SYNC

#
# define if you wish to support the AddSwapHintRectWIN extension
#
#LCDEFS += -D__GL_ADDSWAPHINTRECT

#
# define if you want to clear the frame buffer from the GL core (either my
# direct memory accesses or by accessing the hw)
#
#LCDEFS += -D__GL_CORE_CLEARS_BUFFERS

#
# define if you want GL_RESCALE_NORMAL to be implemented using
# the GL_NORMALIZE routines.
#
#LCDEFS += -D__GL_RESCALE_NORMAL_NORMALIZES

#
# define if you want to support the imaging subset (GL_ARB_imaging)
#
LCDEFS += -D__GL_SUPPORT_ARB_IMAGING_SUBSET
