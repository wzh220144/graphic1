_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XGetConfig,return information about GLX visuals)
_names(XGetConfig)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies the visual to be queried.
It is a pointer to an _xconst(XVisualInfo) structure,
not a visual ID or a pointer to a _xconst(Visual).
_phead(_param3)
Specifies the visual attribute to be returned.
_phead(_param4)
Returns the requested value.
.SH DESCRIPTION
_cmnd sets _param4 to the _param3 value of windows or GLX pixmaps
created with respect to _param2.
_cmnd returns an error code if it fails for any reason.
Otherwise, zero is returned.
.P
_param3 is one of the following:
.P
.TP 22
_glxconst(USE_GL)
_xconst(True) if OpenGL rendering is supported by this visual,
_xconst(False) otherwise.
.TP
_glxconst(BUFFER_SIZE)
Number of bits per color buffer.
For RGBA visuals, _glxconst(BUFFER_SIZE) is the sum of
_glxconst(RED_SIZE),
_glxconst(GREEN_SIZE),
_glxconst(BLUE_SIZE), and
_glxconst(ALPHA_SIZE).
For color index visuals, _glxconst(BUFFER_SIZE) is the size of the
color indexes.
.TP
_glxconst(LEVEL)
Frame buffer level of the visual.
Level zero is the default frame buffer.
Positive levels correspond to frame buffers that overlay the default buffer,
and negative levels correspond to frame buffers that underlay the default
buffer.
.TP
_glxconst(RGBA)
_xconst(True) if color buffers store red, green, blue, and alpha values.
_xconst(False) if they store color indexes.
.TP
_glxconst(DOUBLEBUFFER)
_xconst(True) if color buffers exist in front/back pairs that can be swapped,
_xconst(False) otherwise.
.TP
_glxconst(STEREO)
_xconst(True) if color buffers exist in left/right pairs,
_xconst(False) otherwise.
.TP
_glxconst(AUX_BUFFERS)
Number of auxiliary color buffers that are available.
Zero indicates that no auxiliary color buffers exist.
.TP
_glxconst(RED_SIZE)
Number of bits of red stored in each color buffer.
Undefined if _glxconst(RGBA) is _xconst(False).
.TP
_glxconst(GREEN_SIZE)
Number of bits of green stored in each color buffer.
Undefined if _glxconst(RGBA) is _xconst(False).
.TP
_glxconst(BLUE_SIZE)
Number of bits of blue stored in each color buffer.
Undefined if _glxconst(RGBA) is _xconst(False).
.TP
_glxconst(ALPHA_SIZE)
Number of bits of alpha stored in each color buffer.
Undefined if _glxconst(RGBA) is _xconst(False).
.TP
_glxconst(DEPTH_SIZE)
Number of bits in the depth buffer.
.TP
_glxconst(STENCIL_SIZE)
Number of bits in the stencil buffer.
.TP
_glxconst(ACCUM_RED_SIZE)
Number of bits of red stored in the accumulation buffer.
.TP
_glxconst(ACCUM_GREEN_SIZE)
Number of bits of green stored in the accumulation buffer.
.TP
_glxconst(ACCUM_BLUE_SIZE)
Number of bits of blue stored in the accumulation buffer.
.TP
_glxconst(ACCUM_ALPHA_SIZE)
Number of bits of alpha stored in the accumulation buffer.
.TE
.P
The X protocol allows a single visual ID to be instantiated with
different numbers of bits per pixel.
Windows or GLX pixmaps that will be rendered with OpenGL, however,
must be instantiated with a color buffer depth of _glxconst(BUFFER_SIZE).
.P
Although a GLX implementation can export many visuals that support GL
rendering,
it must support 
at least one RGBA visual. This visual must have at 
least one color buffer,
a stencil buffer of at least 1 bit,
a depth buffer of at least 12 bits,
and an accumulation buffer.
Alpha bitplanes are optional in this visual.
However,
its color buffer size must be as great as that of the
deepest _xconst(TrueColor), _xconst(DirectColor),
_xconst(PseudoColor), or _xconst(StaticColor) visual supported on level zero,
and it must itself be made available on level zero.
.P
In addition, if the X server exports a _xconst(PseudoColor) 
or _xconst(StaticColor) visual on framebuffer level 0, a color index 
visual is also required on that level.
It must have  
at least one color buffer,
a stencil buffer of at least 1 bit,
and a depth buffer of at least 12 bits.
This visual must 
have as many 
color bitplanes as the deepest
_xconst(PseudoColor) or _xconst(StaticColor) visual supported on level 0.
.P
Applications are best written to select the visual that most closely
meets their requirements.
Creating windows or GLX pixmaps with unnecessary buffers can result in
reduced rendering performance as well as poor resource allocation.
.SH NOTES
_xconst(XVisualInfo) is defined in \f2Xutil.h.\fP
It is a structure that includes \f2visual\fP, \f2visualID\fP, \f2screen\fP, and
\f2depth\fP elements.
.SH ERRORS
_glxconst(NO_EXTENSION) is returned if _param1 does not support the GLX
extension.
.P
_glxconst(BAD_SCREEN) is returned if the screen of _param2 does not correspond
to a screen.
.P
_glxconst(BAD_ATTRIBUTE) is returned if _param3 is not a valid GLX attribute.
.P
_glxconst(BAD_VISUAL) is returned if _param2 doesn't support GLX and an
attribute other than _glxconst(USE_GL) is requested.
.SH SEE ALSO
_cmnd(XChooseVisual),
_cmnd(XCreateContext)

