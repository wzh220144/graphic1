_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XMakeContextCurrent,attach a GLX context to a GLX drawable)
_names(XMakeContextCurrent)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies a GLX drawable that to render into.
Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer.
_phead(_param3)
Specifies a GLX drawable that to read from.
Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer.
_phead(_param4)
Specifies the GLX context to be bound to _param3 and _param4.
.SH DESCRIPTION
_cmnd binds _param4 to the current rendering thread and to the _param2
and _param3 GLX drawables. _param2 and _param3 may be the same.
.P
_param2 is used for all OpenGL operations except:
.sp
.in +2m
Any pixel data that are read based on the value of _const(READ_BUFFER).
Note that accumulation operations use the value of _const(READ_BUFFER),
but are not allowed unless _param2 is identical to _param3.
.sp
Any depth values that are retrieved by _cmnd(ReadPixels) or _cmnd(CopyPixels).
.sp
Any stencil values that are retrieved by _cmnd(ReadPixels) or
_cmnd(CopyPixels).
.in 0
.sp
Frame buffer values are taken from _param2.
.P
If the current rendering thread has a current rendering context, that
context is flushed and replaced by _param4.
.P
The first time that _param4 is made current, the viewport and scissor
dimensions are set to the size of the _param2 drawable.  The viewport
and scissor are not modified when _param4 is subsequently made current.
.P
To release the current context without assigning a new one,
call _cmnd with _param2 and _param3 set to _xconst(None) and _param4
set to _xconst(NULL).
.P
_cmnd returns _xconst(True) if it is successful,
_xconst(False) otherwise.
If _xconst(False) is returned, the previously current rendering context
and drawable (if any) remain unchanged.
.SH NOTES
_cmnd is available only if the GLX version is 1.3 or greater.
.P
If the GLX version is 1.1 or 1.0, the GL version must be 1.0.
If the GLX version is 1.2, then the GL version must be 1.1.
If the GLX version is 1.3, then the GL version must be 1.2.
.P
.SH ERRORS
_xconst(BadMatch) is generated if _param2 and _param3 are not compatible.
.P
_xconst(BadAccess) is generated if _param4 is current to some other
thread.
.P
_glxerror(ContextState) is generated if there is a current rendering
context and its render mode is either _const(FEEDBACK) or
_const(SELECT).
.P
_glxerror(BadContext) is generated if _param4 is not a valid GLX
rendering context.
.P
_glxerror(BadDrawable) is generated if _param2 or _param3 is not a valid 
GLX drawable.
.P
_glxerror(BadWindow) is generated if the underlying X window for either
_param2 or _param3 is no longer valid.
.P
_glxerror(BadCurrentDrawable) is generated if the previous context of
the calling thread has unflushed commands, and the previous drawable is
no longer valid.
.P
_xconst(BadAlloc) is generated if the X server does not have enough
resources to allocate the buffers.
.P
_xconst(BadMatch) is generated if:
.sp
.in +2m
_param2 and _param3 cannot fit into frame buffer memory simultaneously.
.sp
_param2 or _param3 is a GLXPixmap and _param4 is a direct rendering
context.
.sp
_param2 or _param3 is a GLXPixmap and _param4 was previously bound to a
GLXWindow or GLXPbuffer.
.sp
_param2 or _param3 is a GLXWindow or GLXPbuffer and _param4 was
previously bound to a GLXPixmap.
.in 0
.SH SEE ALSO
_cmnd(XCreateNewContext),
_cmnd(XCreateWindow),
_cmnd(XCreatePixmap),
_cmnd(XCreatePbuffer),
_cmnd(XDestroyContext),
_cmnd(XGetCurrentContext),
_cmnd(XGetCurrentDisplay),
_cmnd(XGetCurrentDrawable),
_cmnd(XGetCurrentReadDrawable),
_cmnd(XMakeCurrent)
