_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XGetFBConfigAttrib,return information about a GLX frame buffer configuraton)
_names(XGetFBConfigAttrib)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies the GLX frame buffer configuration to be queried.
_phead(_param3)
Specifies the attribute to be returned.
_phead(_param4)
Returns the requested value.
.SH DESCRIPTION
_cmnd sets _param4 to the _param3 value of GLX drawables
created with respect to _param2.
_cmnd returns an error code if it fails for any reason.
Otherwise, _xconst(Success) is returned.
.P
_param3 is one of the following:
.P
.TP 22
_glxconst(FBCONFIG_ID)
XID of the given GLXFBConfig.
.TP
_glxconst(BUFFER_SIZE)
Number of bits per color buffer.
If the frame buffer configuration supports RGBA contexts, then
_glxconst(BUFFER_SIZE) is the sum of
_glxconst(RED_SIZE),
_glxconst(GREEN_SIZE),
_glxconst(BLUE_SIZE), and
_glxconst(ALPHA_SIZE).
If the frame buffer configuration supports only color index contexts,
_glxconst(BUFFER_SIZE) is the size of the
color indexes.
.TP
_glxconst(LEVEL)
Frame buffer level of the configuration.
Level zero is the default frame buffer.
Positive levels correspond to frame buffers that overlay the default buffer,
and negative levels correspond to frame buffers that underlie the default
buffer.
.TP
_glxconst(DOUBLEBUFFER)
_xconst(True) if color buffers exist in front/back pairs that can be swapped,
_xconst(False) otherwise.
.TP
_glxconst(STEREO)
_xconst(True) if color buffers exist in left/right pairs,
_xconst(False) otherwise.
.TP
_glxconst(AUX_BUFFERS)
Number of auxiliary color buffers that are available.
Zero indicates that no auxiliary color buffers exist.
.TP
_glxconst(RED_SIZE)
Number of bits of red stored in each color buffer.
Undefined if RGBA contexts are not supported by the frame buffer configuration.
.TP
_glxconst(GREEN_SIZE)
Number of bits of green stored in each color buffer.
Undefined if RGBA contexts are not supported by the frame buffer configuration.
.TP
_glxconst(BLUE_SIZE)
Number of bits of blue stored in each color buffer.
Undefined if RGBA contexts are not supported by the frame buffer configuration.
.TP
_glxconst(ALPHA_SIZE)
Number of bits of alpha stored in each color buffer.
Undefined if RGBA contexts are not supported by the frame buffer configuration.
.TP
_glxconst(DEPTH_SIZE)
Number of bits in the depth buffer.
.TP
_glxconst(STENCIL_SIZE)
Number of bits in the stencil buffer.
.TP
_glxconst(ACCUM_RED_SIZE)
Number of bits of red stored in the accumulation buffer.
.TP
_glxconst(ACCUM_GREEN_SIZE)
Number of bits of green stored in the accumulation buffer.
.TP
_glxconst(ACCUM_BLUE_SIZE)
Number of bits of blue stored in the accumulation buffer.
.TP
_glxconst(ACCUM_ALPHA_SIZE)
Number of bits of alpha stored in the accumulation buffer.
.TP
_glxconst(RENDER_TYPE)
Mask indicating what type of GLX contexts can be made
current to the frame buffer configuration. Valid bits are 
_glxconst(RGBA_BIT) and
_glxconst(COLOR_INDEX_BIT).
.TP
_glxconst(DRAWABLE_TYPE)
Mask indicating what drawable types the frame buffer configuration
supports. Valid bits are _glxconst(WINDOW_BIT),
_glxconst(PIXMAP_BIT), and _glxconst(PBUFFER_BIT).
.TP
_glxconst(X_RENDERABLE)
_xconst(True) if drawables created with the 
frame buffer configuration can be rendered to by X.
.TP
_glxconst(VISUAL_ID)
XID of the corresponding visual, or zero 
if there is no associated visual (i.e., if
_glxconst(X_RENDERABLE) is _xconst(False) or
_glxconst(DRAWABLE_TYPE) does not have the
_glxconst(WINDOW_BIT) bit set.)
.TP
_glxconst(X_VISUAL_TYPE)
Visual type of associated visual. The returned value will be one of:
_glxconst(TRUE_COLOR), _glxconst(DIRECT_COLOR), _glxconst(PSEUDO_COLOR),
_glxconst(STATIC_COLOR), _glxconst(GRAY_SCALE), _glxconst(STATIC_GRAY),
or _glxconst(NONE), if there is no associated visual (i.e., if
_glxconst(X_RENDERABLE) is _xconst(False) or
_glxconst(DRAWABLE_TYPE) does not have the
_glxconst(WINDOW_BIT) bit set.)
.TP
_glxconst(CONFIG_CAVEAT)
One of _glxconst(NONE),
_glxconst(SLOW_CONFIG), or 
_glxconst(NON_CONFORMANT_CONFIG), indicating
that the frame buffer configuration has no caveats,
some aspect of the frame buffer configuration runs slower
than other frame buffer configurations, or some aspect of the
frame buffer configuration is nonconformant, respectively.
.TP
_glxconst(TRANSPARENT_TYPE)
One of _glxconst(NONE),
_glxconst(TRANSPARENT_RGB),
_glxconst(TRANSPARENT_INDEX), indicating that 
the frame buffer configuration is opaque, is transparent for particular
values of red, green, and blue or is transparent for
particular index values, respectively.
.TP
_glxconst(TRANSPARENT_INDEX_VALUE)
Integer value between 0 and the maximum
frame buffer value for indices, indicating the transparent
index value for the frame buffer configuration. 
Undefined if _glxconst(TRANSPARENT_TYPE)
is not _glxconst(TRANSPARENT_INDEX).
.TP
_glxconst(TRANSPARENT_RED_VALUE)
Integer value between 0 and the maximum
frame buffer value for red, indicating the transparent
red value for the frame buffer configuration. 
Undefined if _glxconst(TRANSPARENT_TYPE)
is not _glxconst(TRANSPARENT_RGB).
.TP
_glxconst(TRANSPARENT_GREEN_VALUE)
Integer value between 0 and the maximum
frame buffer value for green, indicating the transparent
green value for the frame buffer configuration. 
Undefined if _glxconst(TRANSPARENT_TYPE)
is not _glxconst(TRANSPARENT_RGB).
.TP
_glxconst(TRANSPARENT_BLUE_VALUE)
Integer value between 0 and the maximum
frame buffer value for blue, indicating the transparent
blue value for the frame buffer configuration. 
Undefined if _glxconst(TRANSPARENT_TYPE)
is not _glxconst(TRANSPARENT_RGB).
.TP
_glxconst(TRANSPARENT_ALPHA_VALUE)
Integer value between 0 and the maximum
frame buffer value for alpha, indicating the transparent
blue value for the frame buffer configuration. 
Undefined if _glxconst(TRANSPARENT_TYPE)
is not _glxconst(TRANSPARENT_RGB).
.TP
_glxconst(MAX_PBUFFER_WIDTH)
The maximum width that can be specified to 
_cmnd(CreateGLXPbuffer).
.TP
_glxconst(MAX_PBUFFER_HEIGHT)
The maximum height that can be specified to 
_cmnd(CreateGLXPbuffer).
.TP
_glxconst(MAX_PBUFFER_PIXELS)
The maximum number of pixels (width times height) for a 
pixel buffer. Note that this value may be less than
_glxconst(MAX_PBUFFER_WIDTH) times
_glxconst(MAX_PBUFFER_HEIGHT). Also, this
value is static and assumes that no other pixel buffers 
or X resources are contending for the frame buffer memory. 
As a result, it may not be possible to allocate a pixel buffer of
the size given by _glxconst(MAX_PBUFFER_PIXELS).
.TE
.P
Applications should choose the frame buffer configuration that most closely
meets their requirements.
Creating windows, GLX pixmaps, or GLX pixel buffers with unnecessary buffers 
can result in
reduced rendering performance as well as poor resource allocation.
.SH NOTES
_cmnd is available only if the GLX version is 1.3 or greater.
.P
If the GLX version is 1.1 or 1.0, the GL version must be 1.0.
If the GLX version is 1.2, then the GL version must be 1.1.
If the GLX version is 1.3, then the GL version must be 1.2.
.SH ERRORS
_glxconst(NO_EXTENSION) is returned if _param1 does not support the GLX
extension.
_glxconst(BAD_ATTRIBUTE) is returned if _param3 is not a valid GLX attribute.
.SH SEE ALSO
_cmnd(XGetFBConfigs),
_cmnd(XChooseFBConfig),
_cmnd(XGetVisualFromFBConfig),
_cmnd(XGetConfig)
