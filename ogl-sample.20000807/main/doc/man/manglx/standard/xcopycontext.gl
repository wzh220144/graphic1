_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XCopyContext,copy state from one rendering context to another)
_names(XCopyContext)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies the source context.
_phead(_param3)
Specifies the destination context.
_phead(_param4)
Specifies which portions of _param2 state are to be copied to _param3.
.SH DESCRIPTION
_cmnd copies selected groups of state variables from _param2 to _param3.
_param4 indicates which groups of state variables are to be copied.
_param4 contains the bitwise OR of the same symbolic names that are
passed to the GL command _cmnd(PushAttrib).
The single symbolic constant _const(ALL_ATTRIB_BITS) can be used to
copy the maximum possible portion of rendering state.
.P
The copy can be done only if the renderers named by _param2 and _param3
share an address space.
Two rendering contexts share an address space if both are nondirect
using the same server,
or if both are direct and owned by a single process.
Note that in the nondirect case it is not necessary for the calling
threads to share an address space,
only for their related rendering contexts to share an address space.
.P
Not all values for GL state can be copied.
For example,
pixel pack and unpack state,
render mode state,
and select and feedback state are not copied.
The state that can be copied is exactly the state that is manipulated
by the GL command 
.br
_cmnd(PushAttrib).
.P
An implicit _cmnd(Flush) is done by _cmnd if _param2 is the current
context for the calling thread.
.SH NOTES
.P
A \f2process\fP is a single execution environment,
implemented in a single address space,
consisting of one or more threads.
.P
A \f2thread\fP is one of a set of subprocesses that share
a single address space,
but maintain separate program counters,
stack spaces,
and other related global data.
A \f2thread\fP that is the only member of its subprocess group
is equivalent to a \f2process\fP.
.SH ERRORS
_xconst(BadMatch) is generated if rendering contexts _param2 and _param3
do not share an address space
or were not created with respect to the same screen.
.P
_xconst(BadAccess) is generated if _param3 is current to any thread
(including the calling thread) at the time _cmnd is called.
.P
_glxerror(BadCurrentWindow) is generated if _param2 is the current
context and the current drawable is a window that is no longer valid.
.P
_glxerror(BadContext) is generated if either _param2 or _param3 is not
a valid GLX context.
.SH SEE ALSO
_glcmnd(PushAttrib),
_cmnd(XCreateContext),
_cmnd(XIsDirect)
