_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn|tbl)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XSelectEvent,select GLX events for a window or a GLX pixel buffer)
_names(XSelectEvent)
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server. 
_phead(_param2)
Specifies a GLX drawable. Must be a GLX pixel buffer or a window.
_phead(_param3)
Specifies the events to be returned for _param2.

.SH DESCRIPTION
_cmnd sets the GLX event mask for a GLX pixel buffer or a window. 
Calling _cmnd overrides any previous event mask that was
set by the client for _param2. Note that it does not affect the
event masks that other clients may have specified for _param2 since
each client rendering to _param2 has a separate event mask for it.
.P
Currently, only one GLX event, _glxconst(PBUFFER_CLOBBER_MASK), 
can be selected. The following data is returned to the client when a
_glxconst(PBUFFER_CLOBBER_MASK) event occurs:
.sp
.br
typdef struct {
.TS
l l.
    int \f2event_type\fP;	/* GLX_DAMAGED or GLX_SAVED */
    int \f2draw_type\fP;	/* GLX_WINDOW or GLX_PBUFFER */
    unsigned long \f2serial\fP;	/* # of last request processed by server */
    Bool \f2send_event\fP;	/* true if this came for SendEvent request */
    Display \f2*display\fP;	/* display the event was read from */
    GLXDrawable \f2drawable\fP;	/* i.d. of Drawable */
    unsigned int \f2buffer_mask\fP;	/* mask indicating affectedbuffers */
    int \f2x, y\fP;
    int \f2width, height\fP;
    int \f2count\fP;	/* if nonzero, at least this many more */
.TE
.br
} GLXPbufferClobberEvent;
.bp 
The valid bit masks used in \f2buffer_mask\fP are:
.P
.TS
center;
lb lb
l l.
_
Bitmask	Corresponding Buffer
_
_glxconst(FRONT_LEFT_BUFFER_BIT)	Front left color buffer
_glxconst(FRONT_RIGHT_BUFFER_BIT)	Front right color buffer
_glxconst(BACK_LEFT_BUFFER_BIT)	Back left color buffer
_glxconst(BACK_RIGHT_BUFFER_BIT)	Back right color buffer
_glxconst(AUX_BUFFERS_BIT)	Auxillary buffer
_glxconst(DEPTH_BUFFER_BIT)	Depth buffer
_glxconst(STENCIL_BUFFER_BIT)	Stencil buffer
_glxconst(ACCUM_BUFFER_BIT)	Accumulation buffer
_
.TE
.P
A single X server operation can cause several buffer clobber events to be
sent. (e.g., a single GLX pixel buffer may be damaged and cause multiple 
buffer clobber events to be generated). Each event specifies one 
region of the GLX drawable that was affected by the X Server operation. 
The \f2buffer_mask\fP field indicates which color buffers and 
ancillary buffers were affected. All the buffer clobber events 
generated by a single X server action are guaranteed to be
contiguous in the event queue. The conditions under which this event is
generated and the \f2event_type\fP varies, depending on the type of the
GLX drawable.
.P
When the _glxconst(AUX_BUFFERS_BIT) is set in \f2buffer_mask\fP, then
\f2aux_buffer\fP is set to indicate which buffer was affected. If more
than one aux buffer was affected, then additional events are
generated as part of the same contiguous event group. Each
additional event will have only the _glxconst(AUX_BUFFERS_BIT) set in 
\f2buffer_mask\fP, and the \f2aux_buffer\fP field will be set
appropriately. For nonstereo drawables,
_glxconst(FRONT_LEFT_BUFFER_BIT) and _glxconst(BACK_LEFT_BUFFER_BIT) are 
used to specify the front and back color buffers.
.P
For preserved GLX pixel buffers, a buffer clobber event with 
type _glxconst(SAVED) is generated whenever the contents of the 
GLX pixel buffer is moved out of offscreen memory. The event(s) describes which
portions of the GLX pixel buffer were affected. Clients who receive many
buffer clobber events, referring to different save actions,
should consider freeing the GLX pixel buffer resource in order to prevent
the system from thrashing due to insufficient resources.
.P
For an unpreserved GLXPbuffer, a buffer clobber event, with type
_glxconst(DAMAGED), is generated whenever a portion of the GLX pixel buffer
becomes invalid. The client may wish to regenerate the invalid portions
of the GLX pixel buffer.
.P
For Windows, buffer clobber events, with type _glxconst(SAVED), occur
whenever an ancillary buffer, associated with the window, gets clobbered
or moved out of offscreen memory. The event contains information
indicating which color buffers and ancillary buffers-and which portions
of those buffers-were affected.
.SH NOTES
_cmnd is available only if the GLX version is 1.3 or greater.
.P
If the GLX version is 1.1 or 1.0, the GL version must be 1.0.
If the GLX version is 1.2, then the GL version must be 1.1.
If the GLX version is 1.3, then the GL version must be 1.2.
.SH ERRORS
_glxerror(BadDrawable) is generated if _param2 is not a valid window
or a valid GLX pixel buffer. 
.SH ASSOCIATED GETS
_cmnd(XGetSelectedEvent)
.SH SEE ALSO
_cmnd(XCreatePbuffer)
