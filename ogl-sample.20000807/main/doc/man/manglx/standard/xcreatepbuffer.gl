_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XCreatePbuffer,create an off-screen rendering area)
_names(XCreatePbuffer)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies a GLXFBConfig structure with the desired attributes for the
window.
_phead(_param3)
Specifies a list of attribute value pairs, which must be terminated with
_xconst(None), or _xconst(NULL). Accepted attributes are
_glxconst(PBUFFER_WIDTH), _glxconst(PBUFFER_HEIGHT), 
_glxconst(PRESERVED_CONTENTS), and _glxconst(LARGEST_PBUFFER).
.SH DESCRIPTION
_cmnd creates an off-screen rendering area and returns its XID.
Any GLX rendering context that was created with respect to _param2
can be used to render into this window.
Use _cmnd(XMakeContextCurrent) to associate the rendering area with a GLX
rendering context.
.P
The accepted attributes for a GLXPbuffer are:
.TP 22
_glxconst(PBUFFER_WIDTH)
Specify the pixel width of the requested GLXPbuffer. The default value
is 0.
.TP
_glxconst(PBUFFER_HEIGHT)
Specify the pixel height of the requested GLXPbuffer. The default value
is 0.
.TP
_glxconst(LARGEST_PBUFFER)
Specify to obtain the largest available pixel buffer, if the requested
allocation would have failed. The width and height of the allocated
pixel buffer will never exceed the specified _glxconst(PBUFFER_WIDTH) or
_glxconst(PBUFFER_HEIGHT), respectively.  Use _cmnd(XQueryDrawable) to
retrieve the dimensions of the allocated pixel buffer. The default value is
_xconst(False).
.TP
_glxconst(PRESERVED_CONTENTS)
Specify if the contents of the pixel buffer should be preserved when a
resource conflict occurs.  If set to _xconst(False), the contents of the 
pixel buffer may be lost at any time.  If set to _xconst(True), or not
specified in _param3, then the contents of the pixel buffer will be preserved 
(most likely by copying the contents into main system memory from the
frame buffer).  In either case, the client can register (using
_cmnd(XSelectEvent), to receive
pixel buffer clobber events which are generated when the pbuffer contents have
been preserved or damaged.
.TE
.P
GLXPbuffers contain the color and ancillary buffers specified by
_param2.  It is possible to create a pixel buffer with back buffers, and swap 
those buffers using _cmnd(XSwapBuffers).
.SH NOTES
_cmnd is available only if the GLX version is 1.3 or greater.
.P
If the GLX version is 1.1 or 1.0, the GL version must be 1.0.
If the GLX version is 1.2, then the GL version must be 1.1.
If the GLX version is 1.3, then the GL version must be 1.2.
.P
GLXPbuffers are allocated from frame buffer resources; applications
should consider deallocating them when they are not in use.
.SH ERRORS
_xconst(BadAlloc) is generated if there are insufficient resources to
allocate the requested GLXPbuffer.
.P
_glxerror(BadFBConfig) is generated if _param2 is not a valid
GLXFBConfig.
.P
_xconst(BadMatch) is generated if _param2 does not support rendering to
pixel buffers. (e.g., _glxconst(DRAWABLE_TYPE) does not contain
_glxconst(PBUFFER_BIT)).
.SH SEE ALSO
_cmnd(XChooseFBConfig),
_cmnd(XCreatePbuffer),
_cmnd(XMakeContextCurrent),
_cmnd(XSelectEvent)
