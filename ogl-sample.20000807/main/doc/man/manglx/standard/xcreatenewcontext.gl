_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_ 
_C_ http://oss.sgi.com/projects/FreeB
_C_ 
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_ 
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_ 
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ $Date$ $Revision$
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,eqn)_C_
_C_      eqn is automatically replaced with neqn for nroff
_header(XCreateNewContext,create a new GLX rendering context)
_names(XCreateNewContext)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the connection to the X server.
_phead(_param2)
Specifies the GLXFBConfig structure with the desired attributes for the
context.
_phead(_param3)
Specifies the type of the context to be created.  Must be one of
_glxconst(RGBA_TYPE) or _glxconst(COLOR_INDEX_TYPE).
_phead(_param4)
Specifies the context with which to share display lists.
_xconst(NULL) indicates that no sharing is to take place.
_phead(_param4)
Specifies whether rendering is to be done with a direct connection
to the graphics system if possible (_xconst(True))
or through the X server (_xconst(False)).
.SH DESCRIPTION
_cmnd creates a GLX rendering context and returns its handle.
This context can be used to render into GLX windows, pixmaps, or pixel 
buffers.
If _cmnd fails to create a rendering context,
_xconst(NULL) is returned.
.P
If _param3 is _glxconst(RGBA_TYPE), then a context that supports RGBA
rendering is created.  If _param2 is _glxconst(COLOR_INDEX_TYPE), then
context supporting color-index rendering is created.
.P
If _param3 is not _xconst(NULL),
then all display-list indexes and definitions are shared by
context _param3 and by the newly created context.
An arbitrary number of contexts can share a single display-list space.
However,
all rendering contexts that share a single display-list space must
themselves exist in the same address space.
Two rendering contexts share an address space if both are nondirect
using the same server,
or if both are direct and owned by a single process.
Note that in the nondirect case, it is not necessary for the calling
threads to share an address space,
only for their related rendering contexts to share an address space.
.P  
If _param4 is _xconst(True),
then a direct rendering context is created if the
implementation supports direct rendering, if the connection is to an X
server that is local, and if a direct rendering context is available. (An implementation may return an indirect context when _param4 is _xconst(True).)
If _param4 is _xconst(False),
then a rendering context that renders through the X server is always created.
Direct rendering provides a performance advantage in some implementations.
However, direct rendering contexts cannot be shared outside a single process,
and they may be unable to render to GLX pixmaps.
.SH NOTES
_cmnd is available only if the GLX version is 1.3 or greater.
.P
If the GLX version is 1.1 or 1.0, the GL version must be 1.0.
If the GLX version is 1.2, then the GL version must be 1.1.
If the GLX version is 1.3, then the GL version must be 1.2.
.SH ERRORS
_xconst(NULL) is returned if execution fails on the client side.
.P
_glxerror(BadContext) is generated if _param3 is not a GLX context
and is not _xconst(NULL).
.P
_glxerror(BadFBConfig) is generated if _param2 is not a valid
GLXFBConfig.
.P
_xconst(BadMatch) is generated if the context to be created would not
share the address space or the screen of the context specified by _param3.
.P
_xconst(BadAlloc) is generated if the server does not have enough
resources to allocate the new context.
.P
_xconst(BadValue) is generated if _param2 is not a valid visual (for
example, if a particular GLX implementation does not support it).
.SH SEE ALSO
_cmnd(XChooseFBConfig),
_cmnd(XCreateContext),
_cmnd(XDestroyContext),
_cmnd(XGetFBConfigs),
_cmnd(XGetFBConfigAttrib),
_cmnd(XIsDirect),
_cmnd(XMakeContextCurrent)
